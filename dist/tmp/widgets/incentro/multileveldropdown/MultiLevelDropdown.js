define(['exports', 'react'], (function (exports, react) { 'use strict';

    function MultiLevelDropdown({
      DataJSON,
      displaySubmenuString,
      placeholder,
      selectedOption
    }) {
      const [canRender, setCanRender] = react.useState(false);
      const [currentMenu, setCurrentMenu] = react.useState("main");
      const [isOpen, setIsOpen] = react.useState(false);
      const [menuData, setMenuData] = react.useState(null);
      const [menuStack, setMenuStack] = react.useState([]);
      const [selectedValue, setSelectedValue] = react.useState();
      const [submenuPath, setSubmenuPath] = react.useState("");
      const currentItems = react.useMemo(() => {
        if (!menuData || !currentMenu) {
          return [];
        }
        return menuData[currentMenu] || [];
      }, [menuData, currentMenu]);
      const navigateToSubmenu = react.useCallback((submenu, label) => {
        if (submenu && label) {
          setCurrentMenu(submenu);
          setMenuStack(prevStack => [...prevStack, {
            menu: currentMenu,
            label
          }]);
        }
      }, [currentMenu]);
      const goBack = react.useCallback(() => {
        setMenuStack(prevStack => {
          if (prevStack.length === 0) return [];
          const newStack = prevStack.slice(0, -1);
          const targetMenu = newStack.length > 0 ? prevStack[newStack.length - 1].menu : "main";
          setCurrentMenu(targetMenu);
          return newStack;
        });
      }, []);
      react.useEffect(() => {
        if (DataJSON?.status === "available") {
          try {
            const parsedData = JSON.parse(DataJSON.value);
            setMenuData(parsedData);
            setCurrentMenu("main");
            setMenuStack([]);
            setCanRender(true);
          } catch (error) {
            console.error("Failed to parse DataJSON:", error);
          }
        }
      }, [DataJSON]);
      if (!canRender || !menuData) {
        return react.createElement("div", {
          className: "multilevel-dropdown"
        });
      }
      return react.createElement("div", {
        className: "multilevel-dropdown",
        onMouseEnter: () => setIsOpen(true),
        onMouseLeave: () => setIsOpen(false)
      }, react.createElement("div", {
        className: "form-control"
      }, react.createElement("span", null, selectedValue ? displaySubmenuString && submenuPath ? `${submenuPath} > ${selectedValue}` : selectedValue : placeholder), react.createElement("div", {
        className: "multilevel-dropdown__icon"
      }, react.createElement("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24"
      }, react.createElement("path", {
        d: "M8.12496 9.00002L12.005 12.88L15.885 9.00002C16.275 8.61002 16.905 8.61002 17.295 9.00002C17.685 9.39002 17.685 10.02 17.295 10.41L12.705 15C12.315 15.39 11.685 15.39 11.295 15L6.70496 10.41C6.51771 10.2232 6.41248 9.96954 6.41248 9.70502C6.41248 9.4405 6.51771 9.18685 6.70496 9.00002C7.09496 8.62002 7.73496 8.61002 8.12496 9.00002Z"
      })))), isOpen && react.createElement("div", {
        className: "multilevel-dropdown-content",
        key: currentMenu
      }, react.createElement("ul", null, menuStack.length > 0 && react.createElement("li", {
        onClick: goBack,
        className: "multilevel-dropdown__back"
      }, react.createElement("div", {
        className: "multilevel-dropdown__icon"
      }, react.createElement("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24"
      }, react.createElement("path", {
        d: "m15,17.29c.39-.39.39-1.02,0-1.41l-3.88-3.88,3.88-3.88c.39-.39.39-1.02,0-1.41-.39-.39-1.02-.39-1.41,0l-4.59,4.59c-.39.39-.39,1.02,0,1.41l4.59,4.59c.38.38,1.02.38,1.41,0Z"
      }))), react.createElement("span", null, menuStack[menuStack.length - 1]?.label)), currentItems.map(item => react.createElement("li", {
        key: item.value,
        className: menuData[item.value] ? "sub-dropdown" : "",
        onClick: () => {
          if (menuData[item.value]) {
            navigateToSubmenu(item.value, item.label);
          } else {
            const currentPath = menuStack.map(item => item.label).join(" > ");
            setSubmenuPath(currentPath);
            setSelectedValue(item.label);
            selectedOption.setValue(displaySubmenuString && currentPath ? `${currentPath} > ${item.label}` : item.label);
            setIsOpen(false);
            setCurrentMenu("main");
            setMenuStack([]);
          }
        }
      }, react.createElement("span", null, item.label), menuData[item.value] && react.createElement("div", {
        className: "multilevel-dropdown__icon"
      }, react.createElement("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24"
      }, react.createElement("path", {
        d: "m9,6.71c-.39.39-.39,1.02,0,1.41l3.88,3.88-3.88,3.88c-.39.39-.39,1.02,0,1.41.39.39,1.02.39,1.41,0l4.59-4.59c.39-.39.39-1.02,0-1.41l-4.59-4.59c-.38-.38-1.02-.38-1.41,0Z"
      }))))))));
    }

    exports.MultiLevelDropdown = MultiLevelDropdown;

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
